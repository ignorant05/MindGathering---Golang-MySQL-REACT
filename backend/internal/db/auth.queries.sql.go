// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.queries.sql

package db

import (
	"context"
	"database/sql"
)

const allTokens = `-- name: AllTokens :many
SELECT
  tid, token, owner_id, created_at
FROM
  refresh_tokens
`

func (q *Queries) AllTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, allTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Tid,
			&i.Token,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allUsers = `-- name: AllUsers :many
SELECT
  uid, username, email, password, created_at, updated_at
FROM
  users
`

func (q *Queries) AllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, allUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uid,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createToken = `-- name: CreateToken :exec
INSERT INTO
  refresh_tokens (token, owner_id)
VALUES
  (?, ?) ON DUPLICATE KEY
UPDATE token =
VALUES
  (token),
  created_at = CURRENT_TIMESTAMP
`

type CreateTokenParams struct {
	Token   string
	OwnerID int64
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken, arg.Token, arg.OwnerID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
  uid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uid)
	return err
}

const getTokenByUid = `-- name: GetTokenByUid :one
SELECT
  tid, token, owner_id, created_at
FROM
  refresh_tokens
WHERE
  owner_id = ?
`

func (q *Queries) GetTokenByUid(ctx context.Context, ownerID int64) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUid, ownerID)
	var i RefreshToken
	err := row.Scan(
		&i.Tid,
		&i.Token,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
  uid, username, email, password, created_at, updated_at
FROM
  users
WHERE
  uid = ?
`

func (q *Queries) GetUserById(ctx context.Context, uid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByTid = `-- name: GetUserByTid :one
SELECT
  uid, username, email, password, u.created_at, updated_at, tid, token, owner_id, rf.created_at
FROM
  users AS u
  JOIN refresh_tokens AS rf ON u.uid = rf.owner_id
WHERE
  tid = ?
`

type GetUserByTidRow struct {
	Uid         int64
	Username    string
	Email       string
	Password    sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Tid         int64
	Token       string
	OwnerID     int64
	CreatedAt_2 sql.NullTime
}

func (q *Queries) GetUserByTid(ctx context.Context, tid int64) (GetUserByTidRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByTid, tid)
	var i GetUserByTidRow
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tid,
		&i.Token,
		&i.OwnerID,
		&i.CreatedAt_2,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
  uid, username, email, password, created_at, updated_at
FROM
  users
WHERE
  username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfilePic = `-- name: GetUserProfilePic :one
SELECT
  name,
  type,
  data
FROM
  images
WHERE
  user_id = ?
`

type GetUserProfilePicRow struct {
	Name string
	Type string
	Data []byte
}

func (q *Queries) GetUserProfilePic(ctx context.Context, userID sql.NullInt64) (GetUserProfilePicRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfilePic, userID)
	var i GetUserProfilePicRow
	err := row.Scan(&i.Name, &i.Type, &i.Data)
	return i, err
}

const login = `-- name: Login :one
SELECT
  uid, username, email, password, created_at, updated_at
FROM
  users
where
  username = ?
  AND email = ?
`

type LoginParams struct {
	Username string
	Email    string
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const logout = `-- name: Logout :exec
DELETE FROM refresh_tokens
WHERE
  owner_id = ?
`

func (q *Queries) Logout(ctx context.Context, ownerID int64) error {
	_, err := q.db.ExecContext(ctx, logout, ownerID)
	return err
}

const register = `-- name: Register :exec
INSERT INTO
  users (username, email, password)
VALUES
  (?, ?, ?)
`

type RegisterParams struct {
	Username string
	Email    string
	Password sql.NullString
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) error {
	_, err := q.db.ExecContext(ctx, register, arg.Username, arg.Email, arg.Password)
	return err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE refresh_tokens
SET
  token = ?
WHERE
  owner_id = ?
`

type UpdateTokenParams struct {
	Token   string
	OwnerID int64
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.Token, arg.OwnerID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  username = ?,
  email = ?,
  password = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  uid = ?
`

type UpdateUserParams struct {
	Username string
	Email    string
	Password sql.NullString
	Uid      int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Uid,
	)
	return err
}

const updateUserPic = `-- name: UpdateUserPic :exec
INSERT INTO
  images (name, type, data, user_id)
VALUES
  (?, ?, ?, ?) ON DUPLICATE KEY
UPDATE name =
VALUES
  (name),
  type =
VALUES
  (type),
  data =
VALUES
  (data)
`

type UpdateUserPicParams struct {
	Name   string
	Type   string
	Data   []byte
	UserID sql.NullInt64
}

func (q *Queries) UpdateUserPic(ctx context.Context, arg UpdateUserPicParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPic,
		arg.Name,
		arg.Type,
		arg.Data,
		arg.UserID,
	)
	return err
}
